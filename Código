#include <ESP8266WiFi.h>
#include <cmath>

///////////////////////////////////////////////////////
////////////// Definiciones de Sensores //////////////
//////////////////////////////////////////////////////

#include <Wire.h>
#include <Adafruit_ADS1X15.h>
Adafruit_ADS1115 ads1115; // construct an ads1115 at address 0x48
#define power_pin 5 //pin para alimentar el sensor de salinidad
#define channelValue 0
int16_t digitals, digitalt;
int16_t adc0;
int16_t adc1;
int16_t adc2;
int16_t adc3;
int16_t averageSample;
float temperatura=adc0;
const int AirValue =30304;  // Medimos valor en seco
const int WaterValue =15300;  // Medimos valor en agua
int x_values[] = { 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5 }; //Gramos de sal
int y_values[] = { 3, 3, 3, 6, 6, 6, 11, 11, 11, 18, 18, 18, 27, 27, 27 }; //Valor medido
 

// Comentar/Descomentar para ver mensajes de depuracion en monitor serie y/o respuesta del HTTP server
#define PRINT_DEBUG_MESSAGES
#define PRINT_HTTP_RESPONSE

// Comentar/Descomentar para conexion Fuera/Dentro de UPV
#define WiFi_CONNECTION_UPV

// Selecciona que servidor REST quieres utilizar entre ThingSpeak y Dweet
//#define REST_SERVER_THINGSPEAK //Selecciona tu canal para ver los datos en la web (https://thingspeak.com/channels/360979)
#define REST_SERVER_DWEET //Selecciona tu canal para ver los datos en la web (http://dweet.io/follow/PruebaGTI)

///////////////////////////////////////////////////////
/////////////// WiFi Definitions /////////////////////
//////////////////////////////////////////////////////

#ifdef WiFi_CONNECTION_UPV //Conexion UPV
  const char WiFiSSID[] = "GTI1";
  const char WiFiPSK[] = "1PV.arduino.Toledo";
#else //Conexion fuera de la UPV
  const char WiFiSSID[] = "MySSID";
  const char WiFiPSK[] = "MyPassWord";
#endif



///////////////////////////////////////////////////////
/////////////// SERVER Definitions /////////////////////
//////////////////////////////////////////////////////

#if defined(WiFi_CONNECTION_UPV) //Conexion UPV
  const char Server_Host[] = "proxy.upv.es";
  const int Server_HttpPort = 8080;
#elif defined(REST_SERVER_THINGSPEAK) //Conexion fuera de la UPV
  const char Server_Host[] = "api.thingspeak.com";
  const int Server_HttpPort = 80;
#else
  const char Server_Host[] = "dweet.io";
  const int Server_HttpPort = 80;
#endif

WiFiClient client;

///////////////////////////////////////////////////////
/////////////// HTTP REST Connection ////////////////
//////////////////////////////////////////////////////

#ifdef REST_SERVER_THINGSPEAK 
  const char Rest_Host[] = "api.thingspeak.com";
  String MyWriteAPIKey="FMOCSZVHU38UK5S5"; // Escribe la clave de tu canal ThingSpeak
#else 
  const char Rest_Host[] = "dweet.io";
  String MyWriteAPIKey="cdiocurso2018g21"; // Escribe la clave de tu canal Dweet
#endif

#define NUM_FIELDS_TO_SEND 5 //Numero de medidas a enviar al servidor REST (Entre 1 y 8)

/////////////////////////////////////////////////////
/////////////// Pin Definitions ////////////////
//////////////////////////////////////////////////////

const int LED_PIN = 5; // Thing's onboard, green LED

/////////////////////////////////////////////////////
/////////////// WiFi Connection ////////////////
//////////////////////////////////////////////////////

void connectWiFi()
{
  byte ledStatus = LOW;

  #ifdef PRINT_DEBUG_MESSAGES
    Serial.print("MAC: ");
    Serial.println(WiFi.macAddress());
  #endif
  
  WiFi.begin(WiFiSSID, WiFiPSK);

  while (WiFi.status() != WL_CONNECTED)
  {
    // Blink the LED
    digitalWrite(LED_PIN, ledStatus); // Write LED high/low
    ledStatus = (ledStatus == HIGH) ? LOW : HIGH;
    #ifdef PRINT_DEBUG_MESSAGES
       Serial.println(".");
    #endif
    delay(500);
  }
  #ifdef PRINT_DEBUG_MESSAGES
     Serial.println( "WiFi Connected" );
     Serial.println(WiFi.localIP()); // Print the IP address
  #endif
}

/////////////////////////////////////////////////////
/////////////// HTTP POST  ThingSpeak////////////////
//////////////////////////////////////////////////////

void HTTPPost(String fieldData[], int numFields){

// Esta funcion construye el string de datos a enviar a ThingSpeak mediante el metodo HTTP POST
// La funcion envia "numFields" datos, del array fieldData.
// Asegurate de ajustar numFields al número adecuado de datos que necesitas enviar y activa los campos en tu canal web
  
    if (client.connect( Server_Host , Server_HttpPort )){
       
        // Construimos el string de datos. Si tienes multiples campos asegurate de no pasarte de 1440 caracteres
   
        String PostData= "api_key=" + MyWriteAPIKey ;
        for ( int field = 1; field < (numFields + 1); field++ ){
            PostData += "&field" + String( field ) + "=" + fieldData[ field ];
        }     
        
        // POST data via HTTP
        #ifdef PRINT_DEBUG_MESSAGES
            Serial.println( "Connecting to ThingSpeak for update..." );
        #endif
        client.println( "POST http://" + String(Rest_Host) + "/update HTTP/1.1" );
        client.println( "Host: " + String(Rest_Host) );
        client.println( "Connection: close" );
        client.println( "Content-Type: application/x-www-form-urlencoded" );
        client.println( "Content-Length: " + String( PostData.length() ) );
        client.println();
        client.println( PostData );
        #ifdef PRINT_DEBUG_MESSAGES
            Serial.println( PostData );
            Serial.println();
            //Para ver la respuesta del servidor
            #ifdef PRINT_HTTP_RESPONSE
              delay(500);
              Serial.println();
              while(client.available()){String line = client.readStringUntil('\r');Serial.print(line); }
              Serial.println();
              Serial.println();
            #endif
        #endif
    }
}

////////////////////////////////////////////////////
/////////////// HTTP GET  ////////////////
//////////////////////////////////////////////////////

void HTTPGet(String fieldData[], int numFields){
  
// Esta funcion construye el string de datos a enviar a ThingSpeak o Dweet mediante el metodo HTTP GET
// La funcion envia "numFields" datos, del array fieldData.
// Asegurate de ajustar "numFields" al número adecuado de datos que necesitas enviar y activa los campos en tu canal web
  
    if (client.connect( Server_Host , Server_HttpPort )){
           #ifdef REST_SERVER_THINGSPEAK 
              String PostData= "GET https://api.thingspeak.com/update?api_key=";
              PostData= PostData + MyWriteAPIKey ;
           #else 
              String PostData= "GET http://dweet.io/dweet/for/";
              PostData= PostData + MyWriteAPIKey +"?" ;
           #endif
           
           for ( int field = 1; field < (numFields + 1); field++ ){
              PostData += "&field" + String( field ) + "=" + fieldData[ field ];
           }
          
           
           #ifdef PRINT_DEBUG_MESSAGES
              Serial.println( "Connecting to Server for update..." );
           #endif
           client.print(PostData);         
           client.println(" HTTP/1.1");
           client.println("Host: " + String(Rest_Host)); 
           client.println("Connection: close");
           client.println();
           #ifdef PRINT_DEBUG_MESSAGES
              Serial.println( PostData );
              Serial.println();
              //Para ver la respuesta del servidor
              #ifdef PRINT_HTTP_RESPONSE
                delay(500);
                Serial.println();
                while(client.available()){String line = client.readStringUntil('\r');Serial.print(line); }
                Serial.println();
                Serial.println();
              #endif
           #endif  
    }
}

////////////////////////////////////////////////////
/////////////// Sensores  ////////////////
//////////////////////////////////////////////////////

int sensor_humedad(){
  adc0 = ads1115.readADC_SingleEnded(0);
  int humedad = 100*AirValue/(AirValue-WaterValue)-adc0*100/(AirValue-WaterValue);
 
  Serial.print("Porcentaje de humedad: ");
  Serial.print(humedad);
  Serial.println("%");
  Serial.println("");
  Serial.println("---------------------------------");
  Serial.println("");
  delay(100);

  return humedad;
}

int sensor_temp(){
  adc2 = ads1115.readADC_SingleEnded(1);
  int tem = map(adc2, 6700, 10320, 20, 37);
  Serial.print("Temperatura: ");
  Serial.print(tem);
  Serial.println(" grados");
  Serial.println("");
  Serial.println("---------------------------------");
  Serial.println("");
  delay(100);

  return tem;
}

int sensor_luz(){
  adc3 = ads1115.readADC_SingleEnded(2);
  Serial.println("Iluminacion.");
  Serial.println("");
  Serial.print("Intensa iluminacion: ");
  int alto = map(adc3,11,30000,0,100);
  Serial.print(alto);
  Serial.println(" %");
  Serial.println("");
  Serial.print("Debil iluminacion: ");
  if(adc3 > 100){
    adc3 = 100;
  }
  int bajo = map(adc3,11,100,0,100);
  Serial.print(bajo);
  Serial.println(" %");
  Serial.println("");
  Serial.println("---------------------------------");
  Serial.println("");
  delay(100);

  return alto+bajo;
}

// Function to compute the Lagrange polynomial for a given set of data points
// and a specific value of x
double lagrange_polynomial(const int* x_values,const int* y_values,int n,int x){
  double result = 0;

  // Compute the Lagrange polynomial using the formula:
  // L(x) = sum(y[i] * l[i](x))
  // where l[i](x) is the ith Lagrange basis polynomial
  for (int i = 0; i < n; i++)
  {
    double l = 1;

    // Compute the ith Lagrange basis polynomial
    for (int j = 0; j < n; j++)
    {
        if (j != i)
        {
            l *= (x - x_values[j]) / (x_values[i] - x_values[j]);
        }
    }

    result += y_values[i] * l;
  }

  return result;
}

int sensor_salinidad(){
  int n = 5;
  adc1 = analogRead(A0);  
  int x = adc1;
  digitalWrite(power_pin, HIGH);
  int sal = lagrange_polynomial(x_values, y_values, n, x);
  delay(100);
  digitalWrite(power_pin, LOW);
  delay(100);
  Serial.print("Salinidad: ");
  Serial.print(sal, DEC);
  Serial.println(" g/L");
  Serial.println("");
  Serial.println("---------------------------------");
  Serial.println("");
  
  return sal;
}

////////////////////////////////////////////////////
////////////// Cálculo de prosperidad  //////////////
//////////////////////////////////////////////////////

int condiciones(){
  int humedad_maíz = 66;
  int iluminación_maíz = 80;
  int temperatura_maíz = 31;
  int salinidad_maíz = 4;
  int ph_maíz = 6;
  int condiciones = (abs(humedad_maíz-sensor_humedad())+abs(iluminación_maíz-sensor_luz())+abs(temperatura_maíz-sensor_temp())+abs(salinidad_maíz-sensor_salinidad())); //Luego se añadirá el ph
  int prosperidad = 2500/condiciones;
  if (condiciones < 50){
    prosperidad = -condiciones + 100;
  }
  Serial.println("Porcentaje de optimizacion para una cosecha de MAIZ.");
  Serial.println("Este porcentaje recoge la informacion del ambiente en el que se encuentra la planta y refleja que tan bueno es.");
  Serial.print("Prosperidad: ");
  Serial.print(prosperidad);
  Serial.println("%");
  Serial.println("");
  Serial.println("---------------------------------");
  Serial.println("");

  return prosperidad;
}

void setup() {

  connectWiFi();
  digitalWrite(LED_PIN, HIGH);

  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print("Server_Host: ");
      Serial.println(Server_Host);
      Serial.print("Port: ");
      Serial.println(String( Server_HttpPort ));
      Serial.print("Server_Rest: ");
      Serial.println(Rest_Host);
  #endif

  Serial.begin(9600);
  pinMode(power_pin,OUTPUT );
  Serial.println("Ajustando la ganancia...");
  ads1115.setGain(GAIN_ONE);
  Serial.println("Inicializando...");
  ads1115.begin(0x48); //Initialize ads1115
  Serial.println("Inicializando el medidor de Humedad");
  Serial.println("Inicializando el medidor de Salinidad");
  Serial.println("Inicializando el medidor de Temperatura");
  Serial.println("Inicializando el medidor de Luminosidad");
  Serial.println("Ajustando la ganancia...");
  ads1115.setGain(GAIN_ONE);
  Serial.println("Rango del ADC: +/- 4.096V (1 bit=2mV)");
 }

void loop() {
  
  String data[ NUM_FIELDS_TO_SEND + 1];  // Podemos enviar hasta 8 datos

  sensor_humedad();
  sensor_salinidad();
  sensor_temp();
  sensor_luz();
  condiciones(); 
    
  data[ 1 ] = String( sensor_humedad() ); //Escribimos el dato 1. Recuerda actualizar numFields
  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print( "Humedad = " );
      Serial.println( data[ 1 ] );
  #endif

  data[ 2 ] = String( sensor_salinidad() ); //Escribimos el dato 2. Recuerda actualizar numFields
  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print( "Salinidad = " );
      Serial.println( data[ 2 ] );
  #endif

  data[ 3 ] = String( sensor_temp() ); //Escribimos el dato 2. Recuerda actualizar numFields
  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print( "Temperatura = " );
      Serial.println( data[ 3 ] );
  #endif

  data[ 4 ] = String( sensor_luz() ); //Escribimos el dato 2. Recuerda actualizar numFields
  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print( "Luminosidad = " );
      Serial.println( data[ 4 ] );
  #endif

  data[ 5 ] = String( condiciones() ); //Escribimos el dato 2. Recuerda actualizar numFields
  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print( "Prosperidad = " );
      Serial.println( data[ 5 ] );
  #endif

  //Selecciona si quieres enviar con GET(ThingSpeak o Dweet) o con POST(ThingSpeak)
  //HTTPPost( data, NUM_FIELDS_TO_SEND );
  HTTPGet( data, NUM_FIELDS_TO_SEND );

  //Selecciona si quieres un retardo de 15seg para hacer pruebas o dormir el SparkFun
  delay( 5000 );   
  //Serial.print( "Goodnight" );
  //ESP.deepSleep( sleepTimeSeconds * 1000000 );
   
}
